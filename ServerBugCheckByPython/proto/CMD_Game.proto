// To use the "libprotobuf-lite.lib" library for C++ code.
option optimize_for = LITE_RUNTIME;


// Namespace: MESSAGE
package CMD;

//已使用的技能
message tagUsedSkill
{
	optional uint32 skill_id = 1;					//技能ID
	optional uint32 time = 2;						//剩余时间(毫秒)
	optional uint32 cd = 3;
	optional uint32	used = 4;						//已使用技能数
	optional uint32	total = 5;						//总共技能数
	optional uint32 addSec = 6;                     //附加的技能时间
}
//用户信息
message tagUserInfo
{
	optional bytes nick_name = 1;					//昵称
	optional uint32 user_id = 2;					//用户ID
	optional uint32 game_id = 3;					//游戏ID
	optional uint32 vip_level = 4;					//VIP等级
	optional uint32 level = 5;						//用户等级
	optional int32  chair_id = 6;					//椅子ID
	optional int32  table_id = 7;					//桌子ID
	optional int64	score = 8;						//分数
	optional int64  lottery = 9;					//奖券
	optional int32  bullet_mulriple = 10;			//炮台倍率
	repeated tagUsedSkill used_skills = 11;			//已使用技能
	optional uint32 cannon_id = 12;					//炮ID
	optional uint32 face_id = 13;					//头像ID
	optional uint32 exp = 14;						//用户经验
	optional int64  diamond = 15;					//钻石
	optional uint32 bullet = 16;					//子弹
	optional uint32 cannon_num = 17;				//炮管数量
	optional int32  account_level = 18;				//账号等级
	optional int32	login_type = 19;				//登陆方式
	optional bytes	face_url	= 20;				//头像
	optional int32  arena_score = 21;				//竞技场分数
	optional uint32 sitelv = 22;					//锻造（法阵）等级
	optional int64	achievement_title_id = 23;		//佩戴的成就称号ID
	optional uint32 bullet_skin_id = 24;  //子弹皮肤id，0是默认皮肤
	repeated tagBuff buffs = 25;					//buff
	optional uint32 secsitelv = 26;					//妖怪房炮等级
	optional uint32 monster_upper = 27;				// 妖怪房炮提升倍数			
}

//奖池配置信息
message tagRewardPoolOption
{
	optional int32  detail_cost_type = 1;         //1 gold， 2 lottery， 3.diamond
	optional int64  detail_cost_value = 2;
	optional uint32 player_min_stay_time = 3;      //参加奖池所需最小停留时长 （ms）
}

message tagBuff
{
	optional uint32 buff_id = 1;					//buffid
	optional int32  duration = 2;					//持续时间
	optional int32  add_ratio = 3;					//增加比例
 }
// 进入场景
message CMD_S_ENTER_SCENE
{
	optional bool is_special_scene = 1;				//是否特殊场景
	optional uint32 special_sceene_waited_time = 2;	//特殊场景等待时间(毫秒)
	optional uint32 tick_count = 3;					//服务器时间
	optional uint32 exchange_ratio_userscore = 4;	//金币换鱼币比例
	optional uint32 exchange_ratio_fishscore = 5;	//金币换鱼币比例
	optional uint32 exchange_count = 6;				//每次兑换数量 
	optional uint32 min_bullet_multiple = 7;		//最小炮台倍率
	optional uint32 max_bullet_multiple = 8;		//最大炮台倍率
	optional uint32 scene_id = 9;					//当前场景ID
	optional int32	pause_time = 10;				//暂停时间
	repeated tagUserInfo table_users = 11;			//用户信息
	optional int32	bonus_fish = 12;				//奖金鱼
	optional int32  buttle_num = 13;				//子弹数量
	optional int32  alms_get_count = 14;			//救济金领取次数
	optional int32  scene_type = 15;                //场景类型
	optional tagRewardPoolOption rewardpool_opt = 16;  //奖池信息
	optional int32  table_id = 17;					//桌子ID
	optional bool  is_master = 18;					//是否是房主
	optional int32  game_time = 19;					//游戏时间
}
//其他玩家进入场景
message CMD_S_OTHER_ENTER_SCENE
{
	optional tagUserInfo user_info = 1;				//用户信息
}
//离开场景
message CMD_S_EXIT_SCENE
{
	optional uint32 user_id = 1;					//用户ID
	optional int32  chair_id = 2;					//椅子ID
	optional int32  table_id = 3;					//桌子ID
}
//转换场景消息
message CMD_S_SWITCH_SCENE
{
	optional uint32 next_scene = 1;					//下一次场景
	optional uint32 tick_count = 2;					//时间
	optional uint32 fish_kind  = 3;					//奖金鱼的类型
	optional uint32 fish_add_prob = 4;              //奖金鱼倍率提升的概率
	optional uint32 switch_type = 5;                //切换类型，1表示鱼阵，2表示食人鱼
}
//场景结束
message CMD_S_FISH_FORM_END
{
	optional uint32 switch_type = 1;                //切换类型，1表示鱼阵，2表示食人鱼
}
//场景状态信息
message CMD_S_SCENE_STATE
{
	optional int32  scene_state_type = 1;			//场景状态类型
	optional uint32 surplus_time = 2;				//状态剩余时间
}
//鱼的状态信息
message CMD_S_FISH_STATE_INFO
{
	optional uint32			uid = 1;				//鱼UID
	optional uint32			fish_state = 2;			//状态
	optional uint32			fish_state_c = 3;		//子状态
	optional uint32			speed = 4;				//速度
	optional uint32         change_mulriple = 5;    //改变倍率（超级河豚变化）
}
//食人鱼的攻击状态信息
message CMD_S_PIRANHA_ATTACK_INFO
{
	optional uint32			uid = 1;				//鱼UID
	optional uint32         chairID = 2;            //玩家椅子ID
	optional uint32         damage = 3;             //攻击扣减金币，等于0就是MISS
}
//场景鱼
message tagSceneFish
{
	optional uint32			uid = 1;				//鱼UID
	optional uint32			kind_id = 2;			//鱼的类型读表用
	optional uint32			path_id = 3;			//路径ID
	optional int32			path_index = 4;			//当前所在的路径坐标索引
	optional uint32			tag = 5;				//标记(同类炸弹时标记为目标鱼kind_id)
	optional uint32			speed = 6;				//速度
	optional float			offset_x = 7;			//路径偏移
	optional float			offset_y = 8;			//路径偏移
	optional uint32         boat_id  = 9;           //所属船的ID
	optional uint32         alive_state = 10;       //在存活状态下子状态
	optional bool           is_form_fish = 11;      //是否属于鱼阵的鱼
}
//服务器发送场景鱼
message CMD_S_SCENE_FISH
{
	repeated tagSceneFish scene_fishs = 1;			//场景鱼
}
//场景子弹
message tagSceneBullet
{
	optional int32	chair_id = 1;					//椅子ID
	optional uint32 bullet_id = 2;					//子弹ID
	optional float  pos_x = 3;						//子弹位置X
	optional float  pos_y = 4;						//子弹位置Z
	optional float  angle = 5;						//子弹角度
	optional uint32 tick_count = 6;					//子弹时间
	optional uint32 bullet_mulriple = 7;			//子弹倍率
	optional bool	is_double = 8;					//是否为双倍
	optional uint32 lock_fish_id = 9;				//锁定鱼的ID
	optional uint32 bullet_num = 10;				//子弹个数(炮管数量)
}
//发送场景子弹
message CMD_S_SCENE_BULLET
{
	repeated tagSceneBullet scene_bullets = 1;		//场景子弹
}
//生成鱼
message CMD_S_DISTRIBUTE_FISH
{
	repeated tagSceneFish fishs = 1;					//生成的鱼
}
//客户端开炮
message CMD_C_USER_FIRE
{
	optional uint64 tick_count = 1;					//开炮时间
	optional float  angle = 2;						//角度
	optional uint32 lock_fish_id = 3;				//锁定鱼的UID
	optional uint32 bullet_mulriple = 4;			//子弹倍率
	optional uint32 bullet_temp_id = 5;				//子弹临时ID
	optional uint32 bullet_num = 6;				//子弹数量（炮管数量）
	optional bool   is_broadcast = 7;				//是否广播发射子弹
	optional bool   is_double = 8;                  //是否双倍子弹
	optional uint32  sf_skill_id = 9;               //技能鱼的技能ID
	optional uint32 monster_upper = 10;				// 妖怪房炮提升倍数	
};
//服务器返回客户端开炮
message CMD_S_USER_FIRE
{
	optional int32 chair_id			= 1;			//开炮的椅子
	optional uint32 bullet_id		= 2;			//子弹ID
	optional float angle			= 3;			//角度
	optional bool bullet_double		= 4;			//是否双倍
	optional uint32 bullet_mulriple = 5;			//子弹倍率
	optional uint32 lock_fish_id	= 6;			//锁定鱼的UID
	optional uint32 bullet_temp_id	= 7;			//子弹临时ID
	optional uint32 bind_user_id	= 8;            //子弹绑定的非机器人玩家ID，用来计算捕鱼发包
	optional uint32 bullet_num		= 9;			//子弹数量（炮管数量）
	optional int64 curr_score		= 10;			//当前分数
	optional uint32 curr_time       = 11;			//当前服务器时间，用于客户端同步显示
	optional uint32  sf_skill_id	= 12;           //技能鱼的技能ID
	optional int64  cost_score      = 13;           //子弹消耗的分数
	optional int64 curr_daimond		= 14;			//当前钻币
};
//使用技能
message CMD_C_USE_SKILL
{
	optional uint32 skill_id = 1;					//技能ID
	optional uint32 target_id = 2;					//目标
	optional bool	is_trigger = 3;					//是否特殊触发
};
//使用技能
message CMD_S_USE_SKILL
{
	optional int32 chair_id = 1;					//玩家椅子
	optional uint32	skill_id = 2;					//技能ID
	optional uint32	used = 3;						//已使用技能数
	optional uint32	total = 4;						//总共技能数
	optional uint32 score_cost = 5;					//金币消耗
	optional int32	skill_status = 6;				//技能状态
	optional uint32 bind_user_id= 7;				//技能绑定的非机器人玩家ID，用来计算捕鱼发包
	optional uint32 target_id = 8;					//目标
	optional uint32 add_secs = 9;					//增加时间
};
//技能结束
message CMD_C_SKILL_FINISH
{
	optional int32 chair_id = 1;					//玩家椅子
	optional uint32 skill_id = 2;					//技能类型
}
//购买技能
message CMD_C_BUY_SKILL
{
	optional uint32	skill_id = 1;					//技能ID
	optional int32	count = 2;						//购买数量
	optional uint32 target_id = 3;					//目标（万炮技能购买使用需要目标）
};
//服务器返回技能
message CMD_S_BUY_SKILL
{
	optional int32	skill_status = 1;				//购买技能状态
	optional int32	chair_id = 2;					//椅子ID
	optional uint32	skill_id = 3;					//技能ID
	optional int64	score_cost = 4;					//消耗分数
	optional int32	count = 5;						//购买数量
};
//捕获鱼儿(单个)
message CMD_C_CATCH_FISH
{
	optional uint32 fish_uid = 1;					//鱼ID
	optional uint32 bullet_id = 2;					//子弹ID
	optional uint32 bullet_temp_id = 3;				//子弹临时ID
	optional uint32  chair_id = 4;					//椅子ID
	optional uint32 weakness_id = 5;                //波塞冬弱点位置
};
//钻头捕获鱼
message CMD_SUB_C_DRILL_CATCH_FISH
{
	optional uint32  chair_id = 1;					//椅子ID
	optional uint32  sf_skill_id = 2;               //技能鱼的技能ID
	optional uint32  sf_fish_id = 3;                //技能鱼的鱼ID
	repeated uint32  fish_id = 4;                   //捕获的鱼ID
};
//钻头消失
message CMD_SUB_S_DRILL_DISAPPEAR
{
	optional uint32  chair_id = 1;					//椅子ID
	optional uint32  sf_skill_id = 2;               //技能鱼的技能ID
	optional uint32  sf_fish_id = 3;                //技能鱼的鱼ID
	optional int64   total_score = 4;               //总获得金币
};

//掉落道具
message tagDropItem
{
	optional uint32 item_id = 1;					//道具ID
	optional uint32 item_num = 2;					//道具数量
}
//捕获鱼儿
message tagCatchFish
{
	optional uint32 fish_uid		= 1;				//鱼的UID
	optional uint32 fish_kind		= 2;				//鱼的类型
	optional uint32 fish_score		= 3;				//鱼的分数，增量
	optional uint32	fish_lottery	= 4;				//鱼的奖券，增量
	optional uint32 diamond			= 5;				//钻石，增量
	optional bool	bullet_double	= 6;				//是否双倍子弹
	optional bool	link_fish_uid	= 7;				//连接的鱼UID
	optional bool   dead_sign		= 8;               //是否死亡的标志
	optional uint32 skill_id		= 9;				//获得技能,技能鱼自带技能
	//optional uint32 skill_num		= 10;				//获得技能数量--弃用	
	optional uint32 fish_mulriple	= 11;				//鱼的倍率（加成后的）
	optional uint32 fish_original_score	= 12;			//鱼的原始金币（受寻宝影响前）
	repeated tagDropItem drop_items		=13;				//掉落道具
	optional uint32 fish_score_show = 14;        // 用于客户端显示捕获该条鱼得到的金币值
	optional uint32 buff_id = 15;				 // buff_id
	optional int32  buff_time = 16;				// buff剩余时间
	optional int32  buff_add = 17;				// buff增加比例
	optional int32  crit_rate = 18;             // 死亡暴击倍数
};
//服务器返回捕获鱼儿
message CMD_S_CATCH_FISH
{
	optional int32	chair_id		= 1;				//椅子ID
	optional int32  fish_type		= 2;				//中鱼类型
	optional tagSceneBullet bullet	= 3;				//子弹ID
	optional int64  curr_score		= 4;				//分数，当前数值
	optional int64	curr_lottery	= 5;				//奖券，当前数值
	optional int64  curr_diamond	= 6;				//钻石，当前数值
	optional uint32 curr_time       = 7;				//当前服务器时间，用于客户端同步显示
	repeated tagCatchFish catch_fishs = 8;				//捕获的鱼		
	optional int32  add_exp			= 9;
	optional uint32 skill_id		= 10;				//技能抓捕到鱼
	optional bool	is_crit			= 11;				//是否暴击
	optional uint32 buff_id         = 12;               //BUFF状态下打死鱼
	optional uint32 treasure_effect = 13;               //海皇秘宝特效
	optional uint32 dwPLIntegral    = 14;               //传奇海盗积分
};


//技能捕获鱼儿
message CMD_C_SKILL_CATCH_FISH
{
	optional uint32  chair_id = 1;					//椅子ID
	repeated uint32 fishs_uid = 2;					//一群鱼ID	
	optional uint32	 skill_id = 3;					//技能ID
};

//激光炮捕获鱼
message CMD_C_LASER_CANNON_CATCH_FISH
{
	repeated uint32 fishs_uid = 1;					//一群鱼ID
	optional float  angle = 2;						//角度
}
//激光炮捕获鱼
message CMD_S_LASER_CANNON_CATCH_FISH
{
	optional uint32  chair_id = 1;					//椅子ID
	optional float   angle = 2;						//角度
	optional int32   result_code = 3;				//返回结果
}

//更新激光炮能量
message CMD_S_UPDATE_LASER_ENERGY
{
    optional uint32  chair_id = 1;					//椅子ID
	optional int32   energy_value = 2;				//能量值(百分比)
}

//更新用户分数
message CMD_S_UPDATE_USER_SCORE
{
	optional int32 chair_id		= 1;				//椅子ID
	optional int64 curr_score	= 2;				//当前分数
	optional int64 curr_lottery = 3;				//当前的奖券
	optional int64 curr_diamond = 4;				//当前钻石
	optional uint32 curr_bullet = 5;				//当前子弹
	optional int32 change_score	  = 6;				//改变的分数（增量）
	optional int32 change_lottery = 7;				//改变的奖券（增量）
	optional int32 change_diamond = 8;				//改变的钻石（增量）
	optional int64 curr_time	  = 9;              //时间
	optional uint32  update_type  = 10;             //更新类型
	optional int32  arena_score = 11;				//竞技场分数
}
//开始救济金计时
message CMD_S_START_ALMS 
{
	optional int32 wait_time = 1;					//等待时间毫秒
	optional bool  is_double = 2;					//是否双倍
	optional bool  is_experience=3;                 //是否是体验
	optional int32 Count=4;                         //救济金次数
}
//刷新救济金
message CMD_C_REFRESH_ALMS
{

}
//停止救济金
message CMD_S_STOP_ALMS
{

}
//获取救济金
message CMD_C_GET_ALMS
{

}
//获取救济金
message CMD_S_GET_ALMS
{
	optional int32	get_result = 1;				//领取结果详见eGET_ALMS_RESULT
	optional int64	get_score = 2;				//获取分数
	optional int32	wait_time = 3;				//等待时间
	optional bool	is_double = 4;				//是否双倍
	optional int32  get_count = 5;				//获取次数
	optional bool   is_experience=6;            //是否是体验
}
//BOSS来了消息通知
message CMD_S_BOSS_COME
{
	optional uint32 fish_uid = 1;				//鱼的UID
	optional uint32 skill_id = 2;               //鱼死亡后触发技能ID
}
//玩家换炮
message CMD_C_CHANGE_FIRE
{
	optional int32	bullet_mulriple = 1;			//炮的倍率
	optional uint32 cannon_id = 2;				//炮的ID
	optional uint32 canon_num = 3;				//炮管数量
}
//玩家换炮
message CMD_S_CHANGE_FIRE
{
	optional int32	bullet_mulriple = 1;		//炮的倍率
	optional int32	chair_id = 2;				//椅子ID
	optional uint32 cannon_id = 3;				//炮的ID
	optional uint32 cannon_num = 4;				//炮管数量
}

//触发砸蛋
message CMD_S_TRRIGER_EGG
{
	optional int32 id = 1;
}

//触发猜大小
message CMD_S_TRRIGER_NUM
{
	optional int32 id = 1;
	optional int32 reward_type = 2; //奖励类型 1金币,2奖券
	optional int64 reward_value = 3;	//奖励值
}

//砸蛋
message CMD_C_SMASH_EGG
{
	optional int32 index = 1;			//砸的位置
}
//砸蛋结果
message CMD_S_SMASH_EGG
{
	optional int32 result_code = 1;		//结果 1成功
	optional int32 index = 2;			//砸的位置
	optional int32 reward_type = 3;		//奖励类型 1金币,2奖券,3炸弹
	optional int64 reward_value = 4;	//奖励值
}

//触发摇钱树
message CMD_S_TRRIGER_MONEY_TREE
{
	optional int32 id = 1;
	optional int32 tree_second = 2; //摇钱树持续时间
}


//摇钱树
message CMD_C_SMASH_MONEY_TREE
{
	optional int32 user_id = 1;			//用户id
}
//摇钱树结果
message CMD_S_SMASH_MONEY_TREE
{
	optional int32 result_code = 1;		//结果 1成功 2表示摇钱树场景结束
	optional int32 reward_type = 2;		//奖励类型 1金币,2奖券,3钻石
	optional int64 reward_value = 3;	//奖励值
}

//猜大小
message CMD_C_NUM_VAL
{
	optional int32 my_result = 1;			//0 - 小  1 - 大
}
//猜大小结果
message CMD_S_NUM_VAL
{
	optional int32 result_code = 1;		//结果 1成功
	optional int32 result = 2;			//结果  0 - 小  1 - 大
	optional int32 my_result = 3;		//玩家猜测结果   0 - 小  1 - 大
	optional int32 result_val = 4;		//结果值
	optional int32 reward_type = 5;		//奖励类型 1金币,2奖券
	optional int64 reward_value = 6;	//奖励值
}

//触发猜单双
message CMD_S_GUESS_SINDOU
{
	optional int32 user_id = 1;			//用户id
	optional int32 guess_number = 2;    //猜单双次数
	optional int32 init_bet_money = 3;  //初始下注金额
	optional int32 min_bet = 4; //投注下限
	optional int32 max_bet = 5; //投注上限
	optional int32 base_score = 6; //投注基数
}
//猜单双请求
message CMD_C_SINDOU_REQ
{
	optional int32 over_game = 1;           //0-不结算游戏，1-结算游戏
	optional int32 my_result = 2;			//1 - 单  2 - 双
	optional int32 bet_money = 3;           //下注金额
	
}
//猜单双结果
message CMD_S_SINDOU_REQ
{	
  optional int32 err_code = 1;         //错误代码 0 成功 1押注超限或者低限 2押注金币不足
	optional int32 server_result = 2;			//服务器结果1 - 单  2 - 双
	optional int32 my_result = 3;				//玩家结果1 - 单  2 - 双
	optional int32 reward_value = 4;			//此轮结果
	optional int32 game_reward_value = 5;       //整个游戏结果
	optional bool  game_over = 6; //游戏是否结束
}
//炸弹鱼触发
message CMD_S_BOMB_FISH
{
	optional int32 user_id = 1;			//用户id
	optional int32 fish_value = 2;      //子弹鱼的分值
}
// VIP获取救济金
message CMD_C_VIP_GET_ALMS
{
	
}

//点击获取红包
message CMD_C_GET_RED_ENVELOPE
{
	optional uint32							user_id = 1;					//玩家ID
	optional uint32							envelope_id = 2;				//红包ID
}

//获取红包结果
message CMD_S_GET_RED_ENVELOPE
{	
	optional uint32							envelope_id = 1;				//红包ID
	optional uint32							result_code = 2;				//结果0成功，其他失败
	optional uint32							get_gold = 3;					//获得金币
	optional uint32							get_lottery = 4;				//获得奖券
	optional uint32							get_diamond = 5;				//获得钻石
}

//同步召唤鱼聚宝盆的信息
message CMD_S_SUMMON_FISH_INFO
{	
	optional uint32 fish_uid	= 1;				//鱼的UID
	optional uint32 list_time	= 2;				//剩余的生存时间
	optional uint32	user_id		= 3;				//召唤玩家ID
	optional int64  gold_num	= 4;                //金币数量
	optional bytes  nick_name	= 5;				//召唤者的昵称 
}

//神灯召唤鱼的信息
message CMD_S_SHENDENG_FISH
{
	optional uint32	user_id		= 1;				//召唤玩家ID
	optional int32	chair_id	= 2;				//椅子ID
	optional uint32	kind_id		= 3;				//鱼的类型读表用
	optional uint32 path_id     = 4;				//路径ID
	optional int32  path_index  = 5;                //路径索引
}
message CMD_C_SHENDENG_FISH
{
	optional uint32	user_id		= 1;				//召唤玩家ID
	optional int32	chair_id	= 2;				//椅子ID
	optional uint32	kind_id		= 3;				//鱼的类型读表用 
	optional uint32 path_id     = 4;				//路径ID
	optional int32  path_index  = 5;                //路径索引
}
//鱼改变路径
message CMD_S_FISH_CHANGE_PATH
{	
	optional uint32 fish_uid = 1;				//鱼的UID
	optional uint32	path_id  = 2;				//路径ID
}

//服务器返回结果
message CMD_S_REQ_REWARD_POOL_DETAIL
{
	optional int32 result = 1;               //查看eREWARD_POOL_DETAIL_REQ_RESULT
	optional int32 cost_type = 2;            //1.金币, 2 奖券 ， 3.钻石
	optional int64 cost_value = 3;
}


//准备奖金池
message CMD_S_READY_REWARDPOOL
{
	optional int64 reward_pool = 1;				//奖金池
	optional uint32	ready_time = 2;				//开启时间倒计时
	optional bool   can_see_detail = 3;   //能否看到详细信息
	optional bool   can_join = 4;        //能否参加
}
//开启奖金池
message CMD_S_OPEN_REWARDPOOL
{
	optional int64 reward_pool = 1;				//奖金池
	optional uint32	open_time = 2;				//开奖时间倒计时
	optional uint32 target_kind_id1 = 3;			//目标鱼ID1
	optional uint32 target_kind_num1 = 4;			//目标鱼数量1
	optional uint32 target_kind_id2 = 5;			//目标鱼ID2
	optional uint32 target_kind_num2 = 6;			//目标鱼数量2
	optional uint32 target_kind_id3 = 7;			//目标鱼ID3
	optional uint32 target_kind_num3 = 8;			//目标鱼数量3
	optional bool   can_see_detail = 9;   //能否看到详细信息
	optional bool   can_join = 10;        //能否参加
}
//关闭奖金池
message CMD_S_CLOSE_REWARDPOOL
{
	optional int64 reward_pool = 1;					//奖池值
	optional int32 chair_id = 2;					//奖励人椅子ID,没有等于0xFFFF
	optional bytes nick_name = 3;					//奖励人昵称
	optional uint32 user_id = 4;					//用户UserID
}
//用户奖池排行
message tagUserRewardPoolRank
{
	optional int32 chair_id = 1;					//椅子ID
	optional int32 rank = 2;						//排行
}
//更新奖池排行
message CMD_S_UPDATE_REWARDPOOL_RANK
{
	repeated tagUserRewardPoolRank user_ranks = 1;		//用户排行
}
//更新奖池任务
message CMD_S_UPDATE_REWARDPOOL_TASK
{
	optional uint32 kind_id1 = 1;						//任务鱼ID1
	optional uint32 kind_num1 = 2;						//任务鱼数量1
	optional uint32 kind_id2 = 3;						//任务鱼ID2
	optional uint32 kind_num2 = 4;						//任务鱼数量2
	optional uint32 kind_id3 = 5;						//任务鱼ID3
	optional uint32 kind_num3 = 6;						//任务鱼数量3
}
//解锁炮
message CMD_C_UNLOCK_CANNON_MULTIPLE
{
	optional uint32 level = 1;				//要解锁的炮等级
}
//解锁炮奖励
message tagUpLevelReward
{
	optional uint32 reward_type = 1;					//奖励类型
	optional uint32 reward_subtype = 2;					//奖励子类型
	optional int32	reward_value = 3;					//奖励值
}
//升级奖励
message CMD_S_UPLEVEL_REWARD
{
	optional uint32 level = 1;							//等级
	repeated tagUpLevelReward uplevel_reward_list = 2;	//等级奖励
}
//解锁炮
message CMD_S_UNLOCK_CANNON_MULTIPLE
{
	optional uint32 result_code = 1;					//结果0成功 1已解锁 2超过本房间最大解锁炮 3炮的倍数未找到 4金币不足 5奖券不足 6跨等级解锁
	optional uint32 level = 2;							//要解锁的炮倍数
	optional uint32 consume_type = 3;					//消耗类型 1为金币 2为奖券 3钻石
	optional int64	consume_value = 4;					//消耗值
	optional int32  reward_type = 5;					//奖励类型
	optional int32	reward_subtype = 6;					//子类型
	optional int32  reward_value = 7;					//奖励值
}

//炮等级
message CMD_S_ALL_CANNON_LEVEL
{	
	optional int32	chair_id = 1;					//椅子ID
	optional uint32	uesr_id = 2;					//用户ID
	optional uint32 level = 3;						//解锁的炮等级
}

//用户升级
message CMD_S_USER_UP_LEVEL
{
	optional int32		chair_id = 1;					//椅子ID
	optional uint32		uesr_id = 2;					//用户ID
	optional int32      level = 3;						//等级
	optional int64      curr_exp = 4;					//当前经验
}
//用户增加经验
message CMD_S_USER_ADD_EXP
{
	optional uint32		chair_id = 1;					//椅子ID
	optional int32      level = 2;						//等级
	optional int64		add_exp = 3;					//增加经验
	optional int64		curr_exp = 4;					//当前经验
}
//更新新手引导，确认
message CMD_S_UPDATE_GAME_NEWGUIDE_STATUS
{
	optional uint32 e_game_newguide_status = 1;			//引导状态枚举
}
//游戏开始
message CMD_S_GAME_START
{
	optional uint32 init_bullet_num = 1;					//初始子弹数量
}

//游戏结束
message CMD_S_GAME_END
{
	
}
//用户结算
message tagUserResult
{
	optional uint32 chair_id = 1;			//椅子ID
	optional bytes user_name = 2;			//用户名字
	optional int32  rank = 3;				//排行
	optional uint32 score = 4;				//分数
}
//游戏结果
message CMD_S_GAME_RESULT
{
	repeated tagUserResult user_result_list = 1;		//用户结算列表
}

//游戏排行
message CMD_S_GAME_RANK
{
	repeated tagUserResult user_result_list = 1;		//用户结算列表
}

message CMD_C_CANNON_ANGLE
{
	optional int32	chair_id = 1;					//椅子ID
	optional float  angle = 2;						//子弹角度
}

message CMD_S_CANNON_ANGLE
{
	optional int32	chair_id = 1;					//椅子ID
	optional float  angle = 2;						//子弹角度
}

//进入后台
message CMD_C_ENTER_BACKSTAGE
{
	
}

message CMD_C_BACK_GAME
{
}
//比赛升级炮
message CMD_S_MATCH_UP_CANNON
{
	optional int32 cannon_multiple = 1;				//炮的倍数
	optional int32 cannon_num =2;					//炮管数量
}

//开始砸蛋
message CMD_C_START_EGG
{
	
}
//开始砸蛋
message CMD_S_START_EGG
{
	optional int32  result = 1;				//结果0为成功,1为失败
}
//开始砸蛋
message CMD_C_START_TREE
{
	
}
//开始砸蛋
message CMD_S_START_TREE
{
	optional int32  result = 1;				//结果0为成功,1为失败
}

message CMD_S_TREASURE_INFO
{
	optional int32  bonus_fish_num = 1;		//当前奖金鱼数量
	optional int64	bonus_gold	   = 2;		//当前奖金数量
	optional int32	skill_id	   = 3;		//改变的技能ID，万炮技能有效
	optional int32  bonus_times	   = 4;		//抽奖次数
}


message CMD_C_TREASURE_START
{

}

message CMD_S_TREASURE_REULST
{
	enum REULST_TYPE
	{
		RT_SUCESS			= 1;
		RT_NOT_ENOUGH_FISH	= 2; 
		RT_NOT_ENOUGH_GOLD	= 3; 
	}
	optional REULST_TYPE  result_type  = 1;		//操作结果
	optional int32		  result_index = 2;		//获奖index
}

message CMD_C_START_SKILL
{
	optional int32		  skill_id = 1;				//开始使用技能
	optional bool		  is_trigger = 2;			//是否特殊触发
}

message CMD_S_START_SKILL
{
	optional int32		  skill_id = 1;				//开始使用技能
	optional int32		  chair_id = 2;				//玩家椅子
	optional int32		  skill_status = 3;			//技能使用状态
	optional bool		  is_trigger = 4;			//是否特殊触发
}

message CMD_C_CANCEL_SKILL
{
	optional int32		  skill_id = 1;				//取消技能
}

message CMD_S_CANCEL_SKILL
{
	optional int32		  skill_id = 1;				//取消技能
	optional int32		  chair_id = 2;				//玩家椅子
}

//任务鱼
message tagTaskFish
{
	optional uint32 kind_id = 1;
	optional uint32 kind_num = 2;
}

//开始神秘任务
message CMD_S_START_MYSTERIOUS_TASK
{
	optional uint32		open_time = 1;					//时间
	optional int32      arena_score = 2;				//完成后奖励积分
	repeated tagTaskFish target_fish = 3;				//目标鱼
	repeated tagTaskFish complete_fish = 4;				//完成鱼
}

//开始神秘任务
message CMD_S_CLOSE_MYSTERIOUS_TASK
{
	optional bool		is_completed = 1;					//是否完成
	optional int32		arena_score = 2;				//增加竞技场分数
}

//更新神秘任务
message CMD_S_UPDATE_MYSTERIOUS_TASK
{
	repeated tagTaskFish complete_fish = 3;				//完成鱼
}
//竞技场结束
message CMD_S_ARENA_GAME_END
{
	optional int32 arena_score = 1;						//挑战积分
	optional int32 connon_add = 2;						//炮加成积分
	optional int32 vip_add = 3;							//vip加成积分
	optional int32 last_arena_score = 4;				//最终积分
	optional int32 today_max_score = 5;					//今日最高积分
	optional int32 max_arena_score = 6;					//历史最高积分
	optional int32 rank = 7;							//当前排行
	optional int32 site_add = 8;						//炮座加成
	optional int32 count_add = 9;						//挑战次数加成
	optional int32 count_add_next = 10;     //下次挑战次数加成
}

//竞技场关闭
message CMD_S_ARENA_CLOSE
{
	
}

//玩家更换成就称号
message CMD_S_CHANGE_ACHIEVEMENT_TITLE
{
	optional int32			chair_id = 1;				// 椅子ID
	optional uint32			achievement_title = 2;		// 称号ID
}
//活动赛结束
message CMD_S_ARENA_ACTIVITY_END
{
	optional int32 arena_score = 1;						//挑战积分
	optional int32 count_add = 2;						//挑战次数加成
	optional int32 last_arena_score = 3;				//最终积分
	optional int32 max_score = 4;						//今日最高积分
	optional int32 rank = 5;							//当前排行
	optional int32 next_count_add = 6;					//下次挑战次数加成
	optional int32 vip_add = 7;							//vip加成
	optional bool  is_close = 8;						//是否已经结束
}

message CMD_C_BUY_BULLET_SKIN
{
	optional uint32 buy_skin_id = 1;
}

message CMD_S_BUY_BULLET_SKIN
{
	optional int32 result = 1;
	optional uint32 skin_id = 2;
}

message CMD_C_CHANGE_BULLET_SKIN
{
	optional uint32 skin_id = 1;
}

message CMD_S_CHANGE_BULLET_SKIN
{
	optional int32 result = 1;
}

// 换皮肤广播
message CMD_S_BC_USER_CHANGE_BULLET_SKIN
{
	optional uint32 user_id = 1;
	optional uint32 chair_id = 2;
	optional uint32 skin_id = 3;
}

message tagUserBulletSkinInfo
{
	optional uint32 skin_id = 1;
}

message CMD_S_UserBulletSkin
{
	repeated tagUserBulletSkinInfo bullet_skin_info = 1;   //用户可用skin id
}

message CMD_C_RESIGNUP_ARENA_ACTIVITY
{
	
}

message CMD_S_RESIGNUP_ARENA_ACTIVITY
{
	optional int32  result_code = 1;		//0为成功1为报名费不足
}

//掉落扑克牌
message CMD_S_DROP_CARD
{
	optional int32 fish_id = 1; //鱼ID
	optional int32 chair_id = 2; //座位ID
	optional int32 card_num = 3; //扑克牌数量
}

//开牌奖励
message CMD_S_CARD_REWARD
{
	optional int32 user_id = 1;		//玩家ID
	repeated int32 cards = 2;		//开牌数组card[13][4]第一维A,2,3,4,5,6,7,8,9,10,J,Q,K第二维 黑桃，红心，梅花，方块 52小王53大王
	optional int32 poker_type = 3;  //中奖类型-0没中奖1对子2双对3三条4顺子5同花6葫芦7铁支8同花顺9单王10双王
	optional int32 reward_type = 4; //奖励类型
	optional int32 reward_id = 5;   //奖励ID
	optional int32 reward_num = 6;  //奖励数量
	optional tagBuff buffs = 7;	    //奖励buff
}

//玩家老虎机进度
message CMD_S_SLOT_PLAYER_PROGRESS
{
	optional int32 chair_id = 1;	//座位ID
	optional int32 score = 2;		//分数
	optional int32 score_max = 3;	//分数上限
	optional int32 fish_id = 4;		//鱼ID score为0忽略该字段
}

//玩家老虎机进度
message CMD_S_SLOT_GAME_REWARD
{
    optional int32 user_id = 1;			//玩家ID
	optional int32 tiger_type = 2;      //老虎机类型1普通奖励2轮盘奖励3大满贯
	optional int32 reward_index = 3;	//中奖ID 0表示没中奖
	repeated int32 reward_id = 4;		//如果是普通奖励，表示三个图案ID
	optional int32 reward_type = 5;		//奖励类型,1金币 2鱼券 3钻石 其他道具
	optional int32 reward_num = 6;		//奖励数量
	optional int32 power_index = 7;		//倍率
}

//翻倍奖励
message CMD_S_MULTIPLE_REWARD_OPEN
{
	optional int32 reward_id = 1;		//翻倍奖励ID
	optional int32 reward_rate = 2;		//翻倍奖励倍率
	optional uint32 reward_time = 3;	//翻倍奖励倒计时,秒
}

//翻倍奖励中奖信息
message CMD_S_GET_MULTIPLE_REWARD
{
	optional int32 user_id = 1;			//中奖玩家ID
	optional bytes user_name = 2;		//中奖玩家名字
	optional int32 reward_type = 3;		//奖励类型1金币 2鱼券 3钻石 其他道具
	optional int32 reward_num = 4;		//奖励数量
}

message CMD_S_SYNC_TIGER_MAC
{
	optional int32 chair_id = 1;			//座位ID
	optional int32 card_num = 2;			//扑克牌数量
	optional int32 score = 3;				//老虎机当前能量
	optional int32 score_max = 4;			//老虎机能量总值
	optional uint32 slam_pool = 5;			//大满贯奖金池
	optional int32 arena_state = 6;			//竞技赛状态 0无效，1开启，3预开启 
	optional uint32 arena_countdown = 7;	//竞技赛倒计时	
	optional bytes last_user_name = 8;		//上次中奖玩家名字
	optional uint32 last_slam_reward = 9;	//上次中奖金额
	optional uint32 arena_pool = 10;		//竞技赛奖金池
}

message tagCasinoRankPlayerInfo
{
	optional int32 user_id = 1;		//玩家ID
	optional int32 rank = 2;		//排名
	optional int32 score = 3;		//分数
	optional bytes user_name = 4;	//玩家名字
	optional int32 face_id = 5;		//头像ID
}

message CMD_S_CASINO_ARENA_RANK
{
	repeated tagCasinoRankPlayerInfo player_list = 1;		//排名玩家信息
}

message tagRankDetailInfo
{
	optional int32 user_id = 1;		//玩家ID
	optional int32 rank = 2;		//排名
	optional int32 score = 3;		//分数
	optional int32 gold = 4;		//金币
	optional bytes user_name = 5;	//玩家名字
	optional int32 vip_level = 6;	//玩家VIP等级
}

message CMD_S_ARENA_RANK_DETAIL
{
	optional tagRankDetailInfo place1 = 1;		//第一名信息
	optional tagRankDetailInfo place2 = 2;		//第二名信息
	optional tagRankDetailInfo place3 = 3;		//第三名信息
	optional tagRankDetailInfo place4 = 4;		//第四位信息 只读score和gold字段
	optional tagRankDetailInfo place5 = 5;		//第五位信息 只读score和gold字段
	optional tagRankDetailInfo my_rank = 6;		//我的排名信息
}

message CMD_S_SLAM_POOL
{
	optional uint32 slam_pool = 1;				//大满贯奖金池
	optional bytes last_user_name = 2;			//上次中奖玩家名字
	optional uint32 last_slam_reward = 3;		//上次中奖金额
}

message CMD_S_CASINO_ARENA
{
	optional int32 arena_state = 1;			//竞技赛状态 0无效，1开启，3预开启 
	optional uint32 count_down = 2;			//竞技赛状态倒计时
	optional uint32 arena_pool = 3;			//竞技赛奖金池
}

message CMD_S_SLAM_POOL_PLAYER
{
	optional bytes user_name = 1;			//中奖玩家名字
	optional uint32 slam_reward = 2;		//中奖金额
}

//触发BOSS轮盘
message CMD_S_BOSS_ROULETTE
{
	optional int32 user_id = 1;			//用户id
	repeated int32 reward_value = 2;    //轮盘奖励值
	repeated int32 money_value = 3;     //轮盘押注区间值
	optional int32 roulettle_time = 4;  //轮盘剩余时间(豪秒)
}

//开始开启轮盘界面
message CMD_C_START_BOSS_ROULETTE
{
	
}

//开始开启轮盘界面返回
message CMD_S_START_BOSS_ROULETTE
{
	optional int32  result = 1;				//结果0为成功,1为失败
	optional int32  roulettle_time = 2;     //轮盘剩余时间(豪秒)
}

//BOSS轮盘请求
message CMD_C_BOSS_ROULETTE_REQ
{
	optional int32 bet_money = 1;           //下注金额
}

//BOSS轮盘请求返回
message CMD_S_BOSS_ROULETTE_REQ
{	
    optional int32 err_code = 1;           //错误代码 0 成功 1押注超限或者低限 2押注金币不足
	optional int32 reward_value = 2;	   //此轮选中结果
	optional int32 result_money = 3;	   //此轮金币结果
	optional bool  time_over = 4;          //时间是否结束
}

//触发随机倍数
message CMD_S_RANDOM_MULTIPLE
{
    optional int32 fish_kind_ID = 1;       //鱼类型ID
}

//触发随机倍数请求
message CMD_C_RANDOM_MULTIPLE_REQ
{

}

//触发随机倍数返回
message CMD_S_RANDOM_MULTIPLE_RESULT
{	
	optional int32 random_value = 1;	   //此次随机结果
	optional int32 result_money = 2;	   //获取金币结果
	optional int32 chair_ID     = 3;       //椅子ID
	optional int32 fish_kind_ID = 4;       //鱼类型ID
}

// 更新幸运星
message CMD_S_CLASSIC_PRIZE_POOL_UPDATE_STAR
{
	optional int32 add_star = 1;	// 新增星星
	optional uint32 total_star = 2;	// 总星星
	optional uint32 fish_uid = 3;	// 鱼UID
}

// 幸运猜大小
message CMD_C_CLASSIC_PRIZE_POOL_GUESS
{
	enum BetType
	{
		Small = 0;		// 小
		Big = 1;		// 大
		Lucky = 2;		// 幸运过关
	}
	optional BetType type = 1;	// 押注类型
}
// 幸运猜大小
message CMD_S_CLASSIC_PRIZE_POOL_GUESS
{
	optional CMD_C_CLASSIC_PRIZE_POOL_GUESS.BetType result = 1;		// 开奖结果
	optional uint32 dice1 = 2;		// 骰子1
	optional uint32 dice2 = 3;		// 骰子2
	optional int32 change_score = 4;	// 改变分数
	optional uint32 cur_score = 5;	// 当前分数
	optional bool bOpenTurnplate = 6;	// 是否开启轮盘
}

// 领取幸运猜大小奖金
message CMD_C_CLASSIC_PRIZE_POOL_GUESS_GET
{
}
// 领取幸运猜大小奖金
message CMD_S_CLASSIC_PRIZE_POOL_GUESS_GET
{
	enum Result
	{
		Successful = 0;		// 成功
		Failed = 1;			// 失败
	}
	optional Result result = 1;	// 结果
	optional uint32 reward = 2;	// 奖金
	optional uint32 win_count = 3;	// 赢的次数
}

// 获取幸运星信息
message CMD_C_CLASSIC_PRIZE_POOL_GET_STAR
{
}
// 获取幸运星信息
message CMD_S_CLASSIC_PRIZE_POOL_GET_STAR
{
	optional uint32 star = 1;	// 当前幸运星
	optional uint32 ratio = 2;	// 转换比例（幸运星:金币）
	repeated uint32 min_star = 3;	// 各阶段最小幸运星
	repeated uint32 max_ratio = 4;	// 各阶段最大抽取奖池比例
	optional uint32 star_uplimit = 5;	// 幸运星上限
	optional uint32 guess_num = 6;	// 当前猜大小次数
	optional uint32 guess_reward = 7; // 本次猜大小累积金额
	optional uint32 guess_max_count = 8;	// 猜大小最大次数
	optional uint32 guess_min_star = 9;	// 猜大小所需最小幸运星
	optional uint32 turn_min_star = 10;	// 转轮盘所需最小幸运星
}

message CMD_C_BUY_MONSTER_SKIN
{
	optional uint32 buy_skin_id = 1;
}

message CMD_S_BUY_MONSTER_SKIN
{
	optional int32 result = 1;
	optional uint32 skin_id = 2;
}

message CMD_C_CHANGE_MONSTER_SKIN
{
	optional uint32 skin_id = 1;
}

message CMD_S_CHANGE_MONSTER_SKIN
{
	optional int32 result = 1;
	optional uint32 skin_id = 2;
}

// 换皮肤广播
message CMD_S_BC_USER_CHANGE_MONSTER_SKIN
{
	optional uint32 user_id = 1;
	optional uint32 chair_id = 2;
	optional uint32 skin_id = 3;
}

message tagUserMonsterSkinInfo
{
	optional uint32 skin_id = 1;
	optional uint64 life_time = 2;
}

message CMD_S_UserMonsterSkin
{
	repeated tagUserMonsterSkinInfo monster_skin_info = 1;   //用户可用skin id
}

message CMD_S_UPDATE_SAVING_POT
{
    optional uint32	   cur_score			= 1;		    //当前存入的金币
	optional uint32    cur_state            = 2;            //图标状态0消失1不可领2可领
	optional uint32    limit_score          = 3;            //累计上限
}

message CMD_S_PERSONAL_POOL_INFO
{
    optional uint64	   personalpool			= 1;		    //当前库存
	optional uint32    killnum              = 2;            //杀死鱼条数
	optional uint32    killmaxnum           = 3;            //最大死鱼数量 
	optional uint64    lastreward           = 4;            //上次领取的奖励
}

message CMD_C_PERSONALPOOL_REWARD_REQ
{
   
}

message CMD_S_PERSONAL_POOL_UPDATE
{
    optional uint32	   personalpool	    = 1;		       //当前库存 
}

message CMD_S_PERSONAL_POOL_REWARD
{
    optional uint32    result               = 1;            //0成功1失败
    optional uint64	   score			    = 2;		    //当前开奖获取的分数 
	optional uint64    pool	                = 3;            //当前库存
	optional uint32    baserate             = 4;            //基础倍数
	optional uint32    secrate              = 5;            //抬分倍数
	optional uint32    ration               = 6;            //奖池比例(万分比)
	repeated uint32    arr_ration           = 7;            //奖池比例配置
	optional uint32    max_up_rate          = 8;            //最高抬分倍数
	optional uint32    max_base_rate        = 9;            //最高翻倍倍数
}

// 同步金币/能量
message CMD_GR_S_SYNC_SCORE
{
	optional uint64 score = 1;		// 金币/能量
	optional uint32 user_id = 2;	// 用户ID
}

//秘宝能量
message CMD_S_TREASURE_ENERGY
{
	optional int32 cur_energy_value= 1;		        //当前能量值
	optional int32 max_energy_value = 2;		    //最大能量值
}

//秘宝奖励
message CMD_S_TREASURE_REWARD
{
	optional int32 reward_type = 1;		            //奖励类型0低级1高级
	optional int32 reward_effect = 2;               //奖励效果
	optional int32 reward_index = 3;                //奖励序列0无
	optional int64 score = 4;		                //奖励金币
	optional int32 chair_id = 5;                    //玩家座位号
}

message CMD_C_CLEAR_FISH
{
    optional int32 effec_id = 1;                    //奖励效果
}

//世界BOSS放技能
message CMD_S_WORLD_BOSS_DO_SKILL
{
	enum BossSkillID
	{
		BSID_CALL    = 1; //召唤技能――海皇主宰
		BSID_STOP    = 2; //阻挡技能――海皇之怒
		BSID_WEAKEN  = 3; //削弱技能――海皇突刺
		BSID_PROTECT = 4; //保护技能――不屈意志
	}
	optional uint32 bossId = 1;
	optional BossSkillID skill_id = 2; //BOSS技能ID
}

//BOSS技能对玩家的影响效果
message tagSkillEffect
{
	optional uint32 chair = 1;  //技能施放目标:（炮台）位置
	optional uint32 effect = 2; //如果技能生效:可以达到的效果值
	optional bool   effective = 3; //是否生效, 例:如果为false，可能表示BOSS对目标施放了一个技能，但这个技能被玩家的技能阻挡导致技能无效。
}
message CMD_S_SKILL_EFFECT
{
	optional uint32 bossId = 1;
	optional CMD_S_WORLD_BOSS_DO_SKILL.BossSkillID skill   = 2; //技能
	repeated tagSkillEffect                        effects = 3; //影响
}

//护盾值更新
message CMD_S_PSEIDON_SHIELD_VALUE
{
	enum UpdateReason //更新原因
	{
		UR_CREATE = 1;  //创建护盾
		UR_ATTACK = 2;  //护盾值受到攻击
		UR_DESTROY = 3; //护盾损毁
	}
	optional uint32 bossId = 1;
	optional uint32 value = 2; //当前护盾值
	optional UpdateReason reason = 3; //UpdateReason
}

//弱点暴露位置
message CMD_S_PSEIDON_WEAKNESS
{
	optional uint32 bossId = 1;
	repeated uint32 weaknesses = 2; //当前暴露的弱点
}

//打爆弱点
message CMD_S_WEAKNESS_EXPLODE
{
	optional uint32 bossId = 1;
	optional uint32 weakness = 2; //已爆弱点
	optional uint32 score = 3;    //获得的分数(金币量)
}

//修复炮台
message CMD_C_CANNON_REPAIR
{
	optional uint32 click_times = 1; //点击次数
}
message CMD_S_CANNON_REPAIR
{
	optional uint32 chair = 1; //位置
	optional uint32 repair_time = 2; //已修复时间：秒
	optional uint32 init_time = 3; //初始时间
}

//虚弱状态结束:所有弱点消失
message CMD_S_WEAK_STATUS_END
{
	optional uint32 bossId = 1;
}

//玩家技能
message CMD_S_PLAYER_SKILL_EFFECT
{
	optional uint32 skill   = 1; //技能
	repeated tagSkillEffect effects = 2; //影响
}

//玩家技能状态
message tagSkillStatus
{
	enum SkillEffectType //技能状态
	{
		SET_NULL = 0;    //无
		SET_STOP = 1;    //受BOSS技能影响-海皇之怒
		SET_WEAKEN = 2;  //受BOSS技能影响-海皇突刺
		SET_PROTECT = 3; //玩家技能-海神庇佑
		SET_MISSILE = 4; //玩家技能-弑神导弹
		SET_TRIDENT = 5; //玩家技能-三叉戟
	}
    optional SkillEffectType type = 1;
    optional uint32 current = 2;
    optional uint32 maximum = 3;
}
message tagPlayerSkillStatus
{
	optional uint32 chair = 1;
	repeated tagSkillStatus status = 2;
}

message CMD_S_PLAYER_SKILL_STATUS
{
	repeated tagPlayerSkillStatus status = 1;
}

// 请求同步状态
message CMD_C_SYNC_USER_STATE
{
   optional uint32 sate_type = 1;
   optional uint32 state_result = 2; //0开启1结束
   optional bytes  reward = 3;	     //奖励 
}
// 请求同步状态返回
message CMD_S_SYNC_USER_STATE
{
	enum StateType
	{
		State_TREE = 0;		     // 摇钱树
		State_Egg = 1;		     // 砸金蛋
		State_MULTIPLE = 2;      // 随机倍数
		State_CLASSIC = 3;       // 大奖池抽奖
		State_PERSONALPOOL = 4;  // 财神宝藏抽奖
	}
	optional StateType type = 1;
	optional uint32 chair = 2;
	optional uint32 state_result = 3; //0开启1结束
	optional uint32 fish_id = 4;
	optional bytes  reward	= 5;	  //奖励 
}
// 触发用户提示返回
message CMD_S_TRIGER_USER_TIPS
{
	enum TipsType
	{
		Tips_LOCK = 1;		     // 锁定
	}
	optional TipsType type = 1;
}

// 妖精场切换皮肤提升倍数
message CMD_C_CHANGE_MAONSTER_MULTIPLE
{
	optional uint32 multiple = 1;	// 提升倍数
}

// 妖精场切换皮肤提升倍数
message CMD_S_CHANGE_MAONSTER_MULTIPLE
{
	enum Result
	{
		Successful = 0;
		Failed = 1;
	}
	optional Result result = 1;	// 结果
	optional uint32 multiple = 2;	// 提升倍数
	optional uint32 chair = 3;
}

/**************** vip房间相关 **************/
// 开始冒险
message CMD_C_START_ADVENTURE
{
}

// 波次信息
message CMD_S_WHEEL_INFO
{
	optional uint32 cur_wheel = 1;	// 当前波
	optional uint32 max_wheel = 2;	// 最大波
	optional uint32 count_down = 3;	// 倒计时
	optional uint32 cur_fish = 4;	// 当前鱼数量
	optional uint32 max_fish = 5;	// 最大鱼数量
	optional bool   bIsSummon=6;    // 是否召唤制作人
}

// 预言下注
message CMD_C_PREDICTION_CHIP
{
	optional uint32 fish_id = 1;	// 下注ID
	optional uint32 add_chip = 2;	// 下注金额
}

// 预言信息
message CMD_S_PREDICTION_INFO
{
	enum Result
	{
		Success = 0;	// 成功
		Failed = 1;		// 失败
		NotEnough = 2;	// 金币不足
		UpperLimit = 3;	// 下注金额达到上限
		Forbid = 4;		// 禁止下注
	}
	optional uint32 fish_id = 1;	// 下注ID
	optional uint32 chip = 2;		// 下注金额
	optional int32 win_score = 3;	// 赢分金额（0表示未开奖，负值表示输）
	optional Result result = 4;		// 下注结果
	optional uint32 add_chip = 5;	// 本次下注
}

// boss相关数值
message CMD_S_BOSS_DATA
{
	optional uint32 cur_energy = 1;	// 当前能量值
	optional uint32 max_energy = 2;	// 最大能量值
	optional uint32 cur_rage = 3;	// 当前愤怒值
	optional uint32 max_rage = 4;	// 最大愤怒值
	optional uint32 score_box = 5;	// 金币箱（投入+弹头掉落）
	optional uint32 is_fury = 6;	// 是否狂暴变身
	optional uint32 is_supper = 7;	// 是否超级boss
	optional uint32 fish_kind = 8;	// 鱼类型ID
	optional uint32 fish_uid = 9;	// 鱼对象房间唯一ID
	optional uint32 consume_energy = 10;	// 扣除能量值
	optional uint32 add_rage = 11;	// 增加愤怒值
	optional uint32 add_score_box = 12;	// 增加金币箱（投入+弹头掉落）
}
message CMD_S_BossSkillStatus
{
    enum BossSkillStatus
	{
		SkillStatus_Idel=0;            //还未释放技能
		SkillStatus_Process=1;         //技能持续中
		SkillStatus_PassBy=2;          //技能结束
	}
	optional BossSkillStatus   Status=1;       //状态
	optional int32             BossID=2;       //bossid            
}
//道具
message tagGameItemInfo
{
	optional uint32 item_id = 1;					//道具ID
	optional uint32 item_num = 2;					//道具数量
}
message CMD_S_SelectCard
{   
    optional   uint32                CommonCardNum=1;     //普通翻牌数目
	optional   uint32                SuperCardNum=2;      //超级翻牌数目
	optional   tagGameItemInfo       ConsumeItem=3;       //消耗列表
}
message CMD_C_SelectCard
{   
    enum SelectCardType
	{
	    CommonCard=1;
		SuperCard=2;
	}
    optional   SelectCardType         CardType=1;         //
	optional   bool                   IsEndSelectCard=2;  //是否结束翻牌
}
message CMD_S_SelectCardAward
{   
    optional   uint32                 CommonCardNum=1;     //普通翻牌剩余数目d
	optional   uint32                 SuperCardNum=2;      //超级翻牌剩余数目
	optional   tagGameItemInfo        AwardItem=3;         //奖励
}
message CMD_S_SelectCardEnd
{   
    optional   uint32                 CommonCardNum=1;        //普通翻牌数目
	optional   uint32                 SuperCardNum=2;         //超级翻牌数目
	repeated   tagGameItemInfo        CommonAwardItemList=3;  //普通奖励剩余列表
	repeated   tagGameItemInfo        SuperAwardItemList=4;   //超级奖励剩余列表
}
//通知结算
message CMD_C_EndGame
{
}

message CMD_S_ClosAnAccount
{
   repeated    tagGameItemInfo        ItemList=1;               //结算道具列表
}

message CMD_S_GameEndLeadTime
{
   optional    uint64                 LeadTime=1;               //制作人生存时间
}
//奖励信息
message CMD_S_DialAwardInfo
{  
   optional    tagGameItemInfo        AwardInfo=2;              //奖励列表
}
//动画完成
message CMD_C_DialCartoonComplete
{  
}
//空消息
message CMD_C_AND_S_DataNull
{
    
}
message CMD_C_GoOnLianZha
{
  optional    uint32               dwData=2;                 //(0中断 1继续)
}
//更新连炸
message CMD_S_UpdateLianZhanInfo
{
  optional    uint32               dwStatus=1;                //0断开 1继续
  optional    uint64               llOneScore=2;             //单次积分
  optional    uint64               llMoreScore=3;            //累计积分
  optional    uint32               dwNum=4;                  //连炸次数 
  optional    uint32               dwChairID=5;              //座位号  
  optional    uint32               dwItemID=6;               //道具id
}

// 挑战赛结果
message CMD_S_ChallengeOver
{
	optional uint32 integral = 1;		// 积分
	optional uint32 highest_integral = 2;	// 最高积分
	optional uint32 rank = 3;			// 排名
	optional bool is_has_count = 4;		// 是否还有次数
}

//我的排名信息
message CMD_S_My_Current_Ranking
{  
    optional   int32         dwMyScore=1;                                //我的积分
    optional   int32         dwMyRanking=2;                              //我的排名	
	optional   int32         dwKillUserID=3;                             //击杀用户（0则没有击杀 只更新自己信息）
	optional   int32         dwKillVipLev=4;                             //击杀用户vip等级
	optional   int32         dwKillFaceID=5;                             //击杀用户头像
	optional   bool          IsKillRedDiamond=6;                         //击杀用户是否是红钻用户
    optional   bytes         sKillUserName=7;                            //击杀用户昵称
}
