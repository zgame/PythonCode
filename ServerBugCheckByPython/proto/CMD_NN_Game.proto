// To use the "libprotobuf-lite.lib" library for C++ code.
option optimize_for = LITE_RUNTIME;


// Namespace: MESSAGE
package CMD_NN;

//请求上庄
message CMD_S_UserDownInfo
{
	optional uint32	chair_id   = 1;			//桌位id
	optional uint32	game_id    = 2;			//游戏id
	optional uint32	user_id    = 3;			//用户id
	optional uint64 score      = 4;			//金币
	repeated uint64	down_score = 5;		    //下注金币
	optional bytes	nick_name  = 6;			//用户昵称
	optional uint32	vip_lev    = 7;			//用户vip等级
};

message CMD_S_History		
{
	repeated bool	win = 1;				//历史记录信息
};

message CMD_S_Game_Scene
{
	optional bytes	banker_name			= 1;		//庄家名字
	optional uint32	banker_chair_id		= 2;		//当前庄家椅子号，如果是系统坐庄，就为 INVALID_CHAIR 0xFFFF
	optional uint32 banker_user_id		= 3;		//当前庄家的UserID
	optional uint32 banker_times		= 4;		//庄家坐庄次数，之后客户端收到空闲消息的时候自加
	optional uint64	banker_score		= 5;		//如果是系统坐庄，这是系统的分数
	optional uint64	min_banker_score	= 6;		//上庄限制   
	optional uint32 app_banker_count	= 7;		//上庄列表玩家数
	repeated uint32 app_banker_chair_id = 8;		//上庄列表玩家的椅子号	
	optional uint32 game_state			= 9;		//游戏状态
	repeated uint64 my_down_jetton		= 10;		//当前自己押注情况
	repeated uint64 total_jetton		= 11;		//当前所有人押注情况
	optional uint32 his_count			= 12;		//历史记录数
	repeated CMD_S_History  history		= 13;		//历史记录
	optional uint32 tiemr_index			= 14;		//时钟剩余秒数
	optional uint32 total_board			= 15;		//今日总局数
	repeated uint32	board_count			= 16;		//区域赢局数
	optional uint32 table_user_count	= 17;		//上桌玩家数
	repeated uint32 table_chair_id		= 18;		//上桌玩家ChairID
	repeated uint64 chip_values         = 19;		//场景筹码值
	optional uint32 banker_face_id      = 20;		//头像Id
	optional bytes  banker_face_url     = 21;		//网络头像Id
	optional int32	chip_up_limit 		= 22;		// 单局下注上限
};

//申请上庄
message CMD_C_RequestBanker
{
	optional bool	app_banker   = 1;				//是否申请上庄
}

message CMD_WaitBankerUserInfo
{
	optional uint32 user_id						 = 1;			//等待坐庄玩家ID
	optional bytes	user_name					 = 2;			//等待坐庄玩家昵称
	optional uint32 face_id						 = 3;			//等待坐庄玩家头像
	optional int64	user_score					 = 4;			//等待坐庄玩家分数
	optional bytes	face_url					 = 5;			//等待坐庄玩家头像url
};

message CMD_S_RequestBanker//有修改，当玩家申请上庄，返回true,当玩家取消申请和申请下庄，返回false
{
	optional bool					app_banker	 = 1;			//是否申请上庄
	optional uint32					user_id  	 = 2;			//玩家ID
	repeated CMD_WaitBankerUserInfo user_wait    = 3;			//等待玩家列表
	optional int32					monetaryt    = 4;		    //货币类型
	optional int64					monetaryv    = 5;			//货币值
	optional bool					frob_user    = 6;			//首位是否是抢庄玩家
	optional bool					irob_act     = 7;			//同步发起是否因为抢庄
};

//更新庄家信息
message CMD_S_UpdateBanker							//当收到这个消息，客户端将庄家坐庄次数设为0，之后自加
{
	optional bytes	banker_name				= 1;	//庄家名字
	optional uint32	banker_chair_id			= 2;	//当前庄家椅子号，如果是系统坐庄，就为 INVALID_CHAIR 0xFFFF
	optional uint32 banker_user_id			= 3;	//当前庄家的UserID
    optional uint32 banker_times			= 4;	//庄家坐庄次数，之后客户端收到空闲消息的时候自加
    optional uint64	banker_score			= 5;	//如果是系统坐庄，这是系统的分数
	optional uint32 banker_face_id          = 6;	//头像Id
	optional bytes  banker_face_url         = 7;	//网络头像Id
};

message CMD_C_UserChip
{
	optional uint32	chip_index   = 1;				//下注索引
	optional uint64	chip_value   = 2;				//筹码索引
	optional bool android_cheat = 3;      //机器人作弊下注标志
};

message CMD_S_UserChipNotify
{
	optional uint32 user_id      = 1;
	optional uint32 chip_index   = 2;				//下注索引
	optional uint32 chip_value   = 3;				//筹码值	
	optional bool   is_android   = 4;
	optional bool android_cheat = 5;      //机器人作弊下注标志
};

message CMD_C_ContinueChip
{
	repeated uint64	llDownTotal = 1;				//续投列表
};

//续投成功
message CMD_S_ContinueChipResult
{
	optional bool	success		= 1;				//成功标识
	optional uint32	user_id		= 2;
	repeated uint64 down_total	= 3;				//下注分数
};

//游戏的数据
message CMD_S_GameInfo
{
	optional uint32 game_status = 1;				//游戏状态
	optional uint32 timer_value = 2;				//timer的值
};

//游戏的数据
message CMD_S_Card_Data
{
	repeated uint32 card_data = 1;					//牌组
	optional uint32 mutil	  = 2;					//倍率
	optional int64  score     = 3;					//自己该区域的	
};

//游戏结果排名
message CMD_S_RankInfo
{
	optional uint32 rank        			= 1;	//排名
	optional uint64 rank_result				= 2;	//结果
	optional bytes  rank_nicname			= 3;	//昵称
	optional uint32	user_id	    			= 4;	//用来给客户端区分是不是自己
}

message CMD_S_GameEnd
{	
	optional int64	banker_result			= 1;	//庄家成绩
	optional int64  banker_score			= 2;	//庄家分数
	repeated int64  area_total_result		= 3;	//闲家区域总成绩		
	optional int64  area_my_chips			= 4;	//自己的押注
	optional uint32 banker_times			= 5;	//庄家当装次数
	repeated CMD_S_Card_Data send_card_data = 6;	//扑克数据
	repeated uint32 card_type               = 7;	//手牌类型
	repeated bool   player_win				= 8;	//闲家输赢  （新加）
	repeated CMD_S_RankInfo  send_rank_info = 9;	//本局排行数据
	optional bool   isBanker                = 10;
	optional int64  area_all_chips			= 11;	//所有区域的押注
};

message CMD_S_SysMessage
{
	optional uint32 sys_type				= 1;	//消息类型 （ 0-普通消息 ）
	optional bytes  sys_message				= 2;	//消息内容
};

//上桌玩家
message CMD_S_TableUeser
{
	repeated uint32	chair_id				= 1;
};

message CMD_S_UserStandUp
{
	optional uint32		chair_id			= 1;
	optional uint32		game_id				= 2;
	optional uint32		user_id				= 3;
};

message CMD_SUB_C_ONLINE_TOTAL
{
	optional uint32 server_kind				= 1;    //服务器的kindID
};

message CMD_SUB_S_ONLINE_TOTAL
{
	optional uint32 server_kind				= 1;    //服务器的kindID
	optional uint32 online_total			= 2;    //在线总人数
};


message CMD_SUB_C_ROBBANK
{
};


message CMD_SUB_S_AndroidUpdateChip
{
	optional bool cheat_mode = 1;                  //控制机器人下注模式，1作弊，0普通随机
	optional uint32 chip_index = 2;                //作弊模式下有效
};